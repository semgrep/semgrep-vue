(* Generated by ocaml-tree-sitter. *)
(*
   vue grammar

   entrypoint: component
*)

open! Sexplib.Conv
open Tree_sitter_run

type end_tag_name = Token.t

type implicit_end_tag = Token.t

type attribute_name = Token.t (* pattern "[^<>\"'=/\\s]+" *)

type directive_name = Token.t

type directive_shorthand = Token.t

type raw_text = Token.t

type directive_modifier = Token.t (* pattern "[^<>\"'/=\\s.]+" *)

type directive_argument = Token.t (* pattern "[^<>\"'/=\\s.]+" *)

type imm_tok_prec_p1_lbrack = Token.t (* "[" *)

type imm_tok_rbrack = Token.t (* "]" *)

type imm_tok_prec_p1_colon = Token.t (* ":" *)

type directive_dynamic_argument_value =
  Token.t (* pattern "[^<>\"'/=\\s\\]]+" *)

type style_start_tag_name = Token.t

type comment = Token.t

type interpolation_text = Token.t

type script_start_tag_name = Token.t

type imm_tok_prec_p1_dot = Token.t (* "." *)

type pat_58fbb2e = Token.t (* pattern "[^']+" *)

type text_fragment = Token.t

type attribute_value = Token.t (* pattern "[^<>\"'=\\s]+" *)

type start_tag_name = Token.t

type template_start_tag_name = Token.t

type pat_98d585a = Token.t (* pattern "[^\"]+" *)

type erroneous_end_tag_name = Token.t

type end_tag = (
    Token.t (* "</" *) * end_tag_name (*tok*) * Token.t (* ">" *)
)

type directive_modifiers =
  (imm_tok_prec_p1_dot (*tok*) * directive_modifier (*tok*))
    list (* one or more *)

type text = [
    `Text_frag of text_fragment (*tok*)
  | `LCURLLCURL of Token.t (* "{{" *)
]

type quoted_attribute_value = [
    `SQUOT_opt_pat_58fbb2e_SQUOT of (
        Token.t (* "'" *)
      * pat_58fbb2e option
      * Token.t (* "'" *)
    )
  | `DQUOT_opt_pat_98d585a_DQUOT of (
        Token.t (* "\"" *)
      * pat_98d585a option
      * Token.t (* "\"" *)
    )
]

type anon_choice_dire_arg_b33821e = [
    `Dire_arg of directive_argument (*tok*)
  | `Dire_dyna_arg of (
        imm_tok_prec_p1_lbrack (*tok*)
      * directive_dynamic_argument_value (*tok*) option
      * imm_tok_rbrack (*tok*)
    )
]

type anon_choice_attr_value_5986531 = [
    `Attr_value of attribute_value (*tok*)
  | `Quoted_attr_value of quoted_attribute_value
]

type anon_choice_attr_a1991da = [
    `Attr of (
        attribute_name (*tok*)
      * (Token.t (* "=" *) * anon_choice_attr_value_5986531) option
    )
  | `Dire_attr of (
        [
            `Dire_name_opt_imm_tok_prec_p1_colon_choice_dire_arg of (
                directive_name (*tok*)
              * (
                    imm_tok_prec_p1_colon (*tok*)
                  * anon_choice_dire_arg_b33821e
                )
                  option
            )
          | `Dire_shor_choice_dire_arg of (
                directive_shorthand (*tok*) * anon_choice_dire_arg_b33821e
            )
        ]
      * directive_modifiers option
      * (Token.t (* "=" *) * anon_choice_attr_value_5986531) option
    )
]

type start_tag = (
    Token.t (* "<" *)
  * start_tag_name (*tok*)
  * anon_choice_attr_a1991da list (* zero or more *)
  * Token.t (* ">" *)
)

type script_start_tag = (
    Token.t (* "<" *)
  * script_start_tag_name (*tok*)
  * anon_choice_attr_a1991da list (* zero or more *)
  * Token.t (* ">" *)
)

type template_start_tag = (
    Token.t (* "<" *)
  * template_start_tag_name (*tok*)
  * anon_choice_attr_a1991da list (* zero or more *)
  * Token.t (* ">" *)
)

type style_start_tag = (
    Token.t (* "<" *)
  * style_start_tag_name (*tok*)
  * anon_choice_attr_a1991da list (* zero or more *)
  * Token.t (* ">" *)
)

type script_element = (script_start_tag * raw_text (*tok*) option * end_tag)

type style_element = (style_start_tag * raw_text (*tok*) option * end_tag)

type element = [
    `Start_tag_rep_node_choice_end_tag of (
        start_tag
      * node list (* zero or more *)
      * [ `End_tag of end_tag | `Impl_end_tag of implicit_end_tag (*tok*) ]
    )
  | `Self_clos_tag of (
        Token.t (* "<" *)
      * start_tag_name (*tok*)
      * anon_choice_attr_a1991da list (* zero or more *)
      * Token.t (* "/>" *)
    )
]

and node = [
    `Comm of comment (*tok*)
  | `Text of text
  | `Interp of (
        Token.t (* "{{" *)
      * interpolation_text (*tok*) option
      * Token.t (* "}}" *)
    )
  | `Elem of element
  | `Temp_elem of template_element
  | `Script_elem of script_element
  | `Style_elem of style_element
  | `Errons_end_tag of (
        Token.t (* "</" *) * erroneous_end_tag_name (*tok*)
      * Token.t (* ">" *)
    )
]

and template_element = (
    template_start_tag
  * node list (* zero or more *)
  * end_tag
)

type component =
  [
      `Comm of comment (*tok*)
    | `Elem of element
    | `Temp_elem of template_element
    | `Script_elem of script_element
    | `Style_elem of style_element
  ]
    list (* zero or more *)

type directive_dynamic_argument (* inlined *) = (
    imm_tok_prec_p1_lbrack (*tok*)
  * directive_dynamic_argument_value (*tok*) option
  * imm_tok_rbrack (*tok*)
)

type interpolation (* inlined *) = (
    Token.t (* "{{" *)
  * interpolation_text (*tok*) option
  * Token.t (* "}}" *)
)

type erroneous_end_tag (* inlined *) = (
    Token.t (* "</" *) * erroneous_end_tag_name (*tok*) * Token.t (* ">" *)
)

type attribute (* inlined *) = (
    attribute_name (*tok*)
  * (Token.t (* "=" *) * anon_choice_attr_value_5986531) option
)

type directive_attribute (* inlined *) = (
    [
        `Dire_name_opt_imm_tok_prec_p1_colon_choice_dire_arg of (
            directive_name (*tok*)
          * (imm_tok_prec_p1_colon (*tok*) * anon_choice_dire_arg_b33821e)
              option
        )
      | `Dire_shor_choice_dire_arg of (
            directive_shorthand (*tok*) * anon_choice_dire_arg_b33821e
        )
    ]
  * directive_modifiers option
  * (Token.t (* "=" *) * anon_choice_attr_value_5986531) option
)

type self_closing_tag (* inlined *) = (
    Token.t (* "<" *)
  * start_tag_name (*tok*)
  * anon_choice_attr_a1991da list (* zero or more *)
  * Token.t (* "/>" *)
)

type extra

type extras = extra list
